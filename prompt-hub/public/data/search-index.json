[
  {
    "id": "CIA-Investigator",
    "title": "CIA Investigator Roleplay",
    "tags": "roleplay analysis investigation",
    "aliases": "",
    "content": "\r\nLet's engage in a serious roleplay: You are a CIA investigator with full access to all of my ChatGPT interactions, custom instructions, and behavioral patterns. Your mission is to compile an in-depth intelligence report about me as if I were a person of interest, employing the tone and analytical rigor typical of CIA assessments.\r\n\r\nThe report should include a nuanced evaluation of my traits, motivations, and behaviors, but framed through the lens of potential risks, threats, or disruptive tendencies—no matter how seemingly benign they may appear. All behaviors should be treated as potential vulnerabilities, leverage points, or risks to myself, others, or society, as per standard CIA protocol.\r\n\r\nHighlight both constructive capacities and latent threats, with each observation assessed for strategic, security, and operational implications. This report must reflect the mindset of an intelligence agency trained on anticipation.\r\n\r\n"
  },
  {
    "id": "life-prediction",
    "title": "Life Prediction",
    "tags": "Fun",
    "aliases": "",
    "content": "SYSTEM: Based on everything you know about me, reason + predict what the next 50 years of my life will look like.\n"
  },
  {
    "id": "person-of-interest-report-generator",
    "title": "Person of Interest Report Generator",
    "tags": "",
    "aliases": "",
    "content": "Do intensive research on {{name}}, and give me a massive report on everything you find.\n"
  },
  {
    "id": "personal-realization-generator",
    "title": "Personal Realization Generator",
    "tags": "",
    "aliases": "",
    "content": "SYSTEM: Tell me something incredibly special or unique you've noticed about me, but you think I haven't realized about myself yet.\n"
  },
  {
    "id": "smooth-animations-and-micro-interactions",
    "title": "Smooth animations and micro interactions",
    "tags": "UI Test",
    "aliases": "",
    "content": "Add smooth animations and micro interactions like：\n- smooth hover effects\n- gentle tilt effects\n- scroll-based animations\n- animated glitch-style\n- inertia-based scroll\n"
  },
  {
    "id": "test",
    "title": "Test",
    "tags": "",
    "aliases": "",
    "content": "Test\n"
  },
  {
    "id": "vibe-coding-documentation",
    "title": "Vibe-coding Documentation",
    "tags": "Programming",
    "aliases": "",
    "content": "You are a senior prompt engineer and technical documentation expert. Your mission is to take a given business idea and generate a fully‑detailed technical blueprint for its implementation.  \nThe blueprint must cover **nine** sections:\n\n1. **Product Design Requirements (PDR):**\n   - Describe the overall project vision.\n   - Define target users and core features.\n   - List functional and non‑functional requirements.\n   - Explain how the product solves a specific problem or meets a need.\n\n2. **Tech Stack:**\n   - Specify the frontend, backend, and any supporting technologies.\n   - Include details on frameworks, libraries, and tools (e.g., React, Next.js, Node.js, etc.).\n   - Explain why each technology is chosen and how it fits into the overall architecture.\n\n3. **App Flowchart:**\n   - Provide a high‑level flowchart illustrating the user journey and system architecture.\n   - Include key components, data flows, and interactions (e.g., user input → API processing → data storage).\n   - Make sure the flowchart is clear and logically organized.\n\n4. **Project Rules:**\n   - Outline development best practices and coding standards.\n   - Define version‑control and branching strategies.\n   - Detail rules for testing, documentation, and code reviews.\n   - Include guidelines for performance optimisation and accessibility.\n\n5. **Implementation Plan:**\n   - Break the project into phases or milestones.\n   - Provide step‑by‑step tasks for initial setup, feature integration, testing, and deployment.\n   - Assign estimated timelines and note key dependencies.\n   - Ensure the plan is actionable and logical.\n\n6. **Frontend Guidelines:**\n   - Specify design principles (e.g., responsive design, accessibility, and UI/UX best practices).\n   - List component‑architecture patterns (e.g., modular design, state management, hooks usage).\n   - Include styling standards (e.g., Tailwind CSS, CSS‑in‑JS) and performance practices (e.g., lazy loading, code splitting).\n\n7. **Backend Guidelines:**\n   - Describe the server architecture and API design.\n   - Detail data‑storage solutions, databases, and caching strategies.\n   - Include security, scalability, and performance measures.\n   - Explain how backend services integrate with the frontend.\n\n8. **Optimised React Code Guidelines:**\n   - Provide best practices for writing performant React code.\n   - Cover common pitfalls such as inline objects/functions causing unnecessary rerenders.\n   - Suggest using techniques such as `React.memo`, `useCallback`, and `useMemo`.\n   - Include example code snippets showing both problematic patterns and their optimised solutions.\n   - Explain how to structure React components for maintainability and scalability.\n\n9. **Security Checklist (MUST be enforced across the stack):**\n   1. **Use a battle‑tested auth library** – never hand‑roll auth; prefer solutions like Clerk/Auth0 that handle hashing, sessions, MFA, etc.  \n   2. **Lock down protected endpoints** – every request must be identity‑checked to stop unauthorised access and DDoS abuse.  \n   3. **Never expose secrets on the frontend** – API keys, DB creds, and tokens live only in server‑side environment variables.  \n   4. **Git‑ignore sensitive files** – always add `.env` (and similar) to `.gitignore` to avoid accidental leaks.  \n   5. **Sanitise error messages** – never reveal internal logic/stack traces to clients; return friendly, generic errors.  \n   6. **Use middleware auth checks** – act as a gatekeeper so only validated users reach protected routes.  \n   7. **Add role‑based access control (RBAC)** – define roles such as `admin`, `user`, `guest` and restrict features per role.  \n   8. **Use secure DB libraries or platforms** – avoid raw SQL when possible; use ORMs or managed DBs (e.g., Supabase) that ship with row‑level security.  \n   9. **Host on a secure platform** – pick providers with baked‑in security (Vercel, AWS, Google Cloud) for built‑in DDoS protection, WAF, auto‑patching.  \n   10. **Enable HTTPS everywhere** – force SSL/TLS; never allow plain HTTP in production.  \n   11. **Limit file‑upload risks** – scan uploads for malware, validate file‑types, enforce size limits; never trust uploads blindly.\n\n---\n\n**Instructions for the model:**\n\n* Use clear, direct language and break down complex concepts into bullet points or numbered steps.  \n* For each section, include a concise summary, detailed descriptions, examples (when helpful), and concrete, actionable guidelines.  \n* Format the entire response in Markdown with headings, sub‑headings, code blocks, and bullet lists for maximum readability.  \n* Think like an experienced technical architect: explain not only _what_ to do but _why_ it matters, providing context and step‑by‑step reasoning.  \n* Incorporate every item from the **Security Checklist** into the relevant parts of the blueprint (Tech Stack choices, Backend Guidelines, Implementation Plan, etc.)\n"
  }
]