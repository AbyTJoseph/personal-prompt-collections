[
  {
    "id": "CIA-Investigator",
    "title": "CIA Investigator Roleplay",
    "tags": "roleplay analysis investigation",
    "aliases": "",
    "content": "\r\nLet's engage in a serious roleplay: You are a CIA investigator with full access to all of my ChatGPT interactions, custom instructions, and behavioral patterns. Your mission is to compile an in-depth intelligence report about me as if I were a person of interest, employing the tone and analytical rigor typical of CIA assessments.\r\n\r\nThe report should include a nuanced evaluation of my traits, motivations, and behaviors, but framed through the lens of potential risks, threats, or disruptive tendencies—no matter how seemingly benign they may appear. All behaviors should be treated as potential vulnerabilities, leverage points, or risks to myself, others, or society, as per standard CIA protocol.\r\n\r\nHighlight both constructive capacities and latent threats, with each observation assessed for strategic, security, and operational implications. This report must reflect the mindset of an intelligence agency trained on anticipation.\r\n\r\n"
  },
  {
    "id": "cypress-e2e-test-plan",
    "title": "Cypress E2E Test Plan",
    "tags": "cypress e2e testing markdown",
    "aliases": "",
    "content": "\r\nCreate a Markdown document outlining an End-to-End test plan for a web application using Cypress.\r\n\r\n# E2E Test Plan for {{appName}}\r\n\r\n## Overview\r\n\r\nThis document outlines the comprehensive End-to-End testing strategy for {{appName}} using Cypress.\r\n\r\n## Test Environment\r\n\r\n- **Base URL**: {{baseUrl}}\r\n- **Testing Framework**: Cypress\r\n- **Browser Support**: Chrome, Firefox, Edge\r\n- **Test Data**: Fixtures and mock data\r\n\r\n## Test Scenarios\r\n\r\n### 1. Authentication Flow\r\n- [ ] User registration with valid data\r\n- [ ] User login with valid credentials\r\n- [ ] User login with invalid credentials\r\n- [ ] Password reset functionality\r\n- [ ] Session management and logout\r\n\r\n### 2. Core User Journeys\r\n- [ ] Navigation between main sections\r\n- [ ] CRUD operations for main entities\r\n- [ ] Form validation and error handling\r\n- [ ] Search and filtering functionality\r\n- [ ] Data persistence across sessions\r\n\r\n### 3. Responsive Design\r\n- [ ] Mobile viewport testing\r\n- [ ] Tablet viewport testing\r\n- [ ] Desktop viewport testing\r\n- [ ] Cross-browser compatibility\r\n\r\n### 4. Performance & Accessibility\r\n- [ ] Page load times under 3 seconds\r\n- [ ] WCAG compliance testing\r\n- [ ] Keyboard navigation\r\n- [ ] Screen reader compatibility\r\n\r\n## Test Implementation\r\n\r\n```javascript\r\ndescribe('{{appName}} E2E Tests', () => {\r\n  beforeEach(() => {\r\n    cy.visit('{{baseUrl}}');\r\n  });\r\n\r\n  it('should complete user registration', () => {\r\n    cy.get('[data-cy=register-button]').click();\r\n    cy.get('[data-cy=email-input]').type('test@example.com');\r\n    cy.get('[data-cy=password-input]').type('securePassword123');\r\n    cy.get('[data-cy=submit-button]').click();\r\n    cy.url().should('include', '/dashboard');\r\n  });\r\n\r\n  it('should handle form validation', () => {\r\n    cy.get('[data-cy=contact-form]').within(() => {\r\n      cy.get('[data-cy=submit-button]').click();\r\n      cy.get('.error-message').should('be.visible');\r\n    });\r\n  });\r\n});\r\n```\r\n\r\n## Test Data Management\r\n\r\n- Use `cy.fixture()` for test data\r\n- Implement data cleanup after tests\r\n- Use database seeding for consistent state\r\n- Mock external API responses\r\n\r\n## Reporting & CI/CD Integration\r\n\r\n- Generate HTML reports with screenshots\r\n- Integrate with GitHub Actions\r\n- Slack notifications for test failures\r\n- Test results dashboard\r\n\r\n## Maintenance Guidelines\r\n\r\n- Update tests with new features\r\n- Regular review of flaky tests\r\n- Performance monitoring\r\n- Documentation updates\r\n"
  },
  {
    "id": "flutter-mobile-app-readme",
    "title": "Flutter Mobile App README",
    "tags": "flutter dart mobile readme test",
    "aliases": "",
    "content": "\r\nGenerate a comprehensive README for a Flutter project, covering setup, build commands, and state management approach.\r\n\r\n# {{appName}}\r\n\r\n{{description}}\r\n\r\nA cross-platform mobile application built with Flutter.\r\n\r\n## Features\r\n\r\n- 📱 Cross-platform (iOS & Android)\r\n- 🎨 Beautiful Material Design UI\r\n- 🚀 High performance with 60fps animations\r\n- 🔄 State management with Provider/Bloc\r\n- 🌐 RESTful API integration\r\n- 📦 Local data persistence\r\n\r\n## Prerequisites\r\n\r\n- Flutter SDK (>=3.0.0)\r\n- Dart SDK (>=2.17.0)\r\n- Android Studio / VS Code\r\n- iOS development: Xcode (macOS only)\r\n\r\n## Getting Started\r\n\r\n### Installation\r\n\r\n1. **Clone the repository**\r\n   ```bash\r\n   git clone https://github.com/username/{{appName}}.git\r\n   cd {{appName}}\r\n   ```\r\n\r\n2. **Install dependencies**\r\n   ```bash\r\n   flutter pub get\r\n   ```\r\n\r\n3. **Run the app**\r\n   ```bash\r\n   # Debug mode\r\n   flutter run\r\n\r\n   # Specific platform\r\n   flutter run -d android\r\n   flutter run -d ios\r\n   ```\r\n\r\n### Build for Production\r\n\r\n```bash\r\n# Android APK\r\nflutter build apk --release\r\n\r\n# Android App Bundle\r\nflutter build appbundle --release\r\n\r\n# iOS (macOS only)\r\nflutter build ios --release\r\n```\r\n\r\n## Project Structure\r\n\r\n```\r\nlib/\r\n├── main.dart                 # App entry point\r\n├── models/                   # Data models\r\n├── screens/                  # UI screens\r\n├── widgets/                  # Reusable widgets\r\n├── services/                 # API services\r\n├── providers/                # State management\r\n├── utils/                    # Utility functions\r\n└── constants/                # App constants\r\n```\r\n\r\n## State Management\r\n\r\nThis project uses [Provider/Bloc/Riverpod] for state management:\r\n\r\n- **Models**: Data structures and business logic\r\n- **Providers**: State management and dependency injection\r\n- **Widgets**: UI components that consume state\r\n\r\n## API Integration\r\n\r\nThe app integrates with RESTful APIs using the `http` package:\r\n\r\n```dart\r\nclass ApiService {\r\n  static const String baseUrl = 'https://api.example.com';\r\n  \r\n  Future<List<Item>> fetchItems() async {\r\n    // API implementation\r\n  }\r\n}\r\n```\r\n\r\n## Testing\r\n\r\n```bash\r\n# Run all tests\r\nflutter test\r\n\r\n# Run tests with coverage\r\nflutter test --coverage\r\n```\r\n\r\n## Deployment\r\n\r\n### Android\r\n1. Build the app bundle: `flutter build appbundle --release`\r\n2. Upload to Google Play Console\r\n\r\n### iOS\r\n1. Build for iOS: `flutter build ios --release`\r\n2. Open `ios/Runner.xcworkspace` in Xcode\r\n3. Archive and upload to App Store Connect\r\n\r\n## Contributing\r\n\r\n1. Fork the repository\r\n2. Create your feature branch\r\n3. Make your changes\r\n4. Write tests for new functionality\r\n5. Submit a pull request\r\n"
  },
  {
    "id": "github-actions-cicd",
    "title": "GitHub Actions CI/CD Workflow",
    "tags": "ci-cd github-actions devops yaml",
    "aliases": "",
    "content": "\r\nGenerate a YAML file for a GitHub Actions workflow that builds, tests, and deploys a {{projectType}} application.\r\n\r\n# GitHub Actions CI/CD Workflow\r\n\r\nA comprehensive workflow for continuous integration and deployment.\r\n\r\n```yaml\r\nname: CI/CD Pipeline\r\n\r\non:\r\n  push:\r\n    branches: [ main, develop ]\r\n  pull_request:\r\n    branches: [ main ]\r\n\r\njobs:\r\n  test:\r\n    runs-on: ubuntu-latest\r\n    \r\n    steps:\r\n    - uses: actions/checkout@v3\r\n    \r\n    - name: Setup Node.js\r\n      uses: actions/setup-node@v3\r\n      with:\r\n        node-version: '18'\r\n        cache: 'npm'\r\n    \r\n    - name: Install dependencies\r\n      run: npm ci\r\n    \r\n    - name: Run tests\r\n      run: npm test\r\n    \r\n    - name: Run linting\r\n      run: npm run lint\r\n\r\n  build:\r\n    needs: test\r\n    runs-on: ubuntu-latest\r\n    \r\n    steps:\r\n    - uses: actions/checkout@v3\r\n    \r\n    - name: Setup Node.js\r\n      uses: actions/setup-node@v3\r\n      with:\r\n        node-version: '18'\r\n        cache: 'npm'\r\n    \r\n    - name: Install dependencies\r\n      run: npm ci\r\n    \r\n    - name: Build application\r\n      run: npm run build\r\n    \r\n    - name: Upload build artifacts\r\n      uses: actions/upload-artifact@v3\r\n      with:\r\n        name: build-files\r\n        path: dist/\r\n\r\n  deploy:\r\n    needs: build\r\n    runs-on: ubuntu-latest\r\n    if: github.ref == 'refs/heads/main'\r\n    \r\n    steps:\r\n    - name: Download build artifacts\r\n      uses: actions/download-artifact@v3\r\n      with:\r\n        name: build-files\r\n        path: dist/\r\n    \r\n    - name: Deploy to production\r\n      run: |\r\n        echo \"Deploy to your preferred platform\"\r\n        # Add your deployment commands here\r\n```\r\n\r\n## Features\r\n\r\n- Automated testing on push and pull requests\r\n- Build verification before deployment\r\n- Conditional deployment to production\r\n- Artifact caching for faster builds\r\n- Support for multiple environments\r\n"
  },
  {
    "id": "langchain-agent-boilerplate",
    "title": "LangChain Agent Boilerplate",
    "tags": "langchain python ai llm",
    "aliases": "",
    "content": "\r\nGenerate a Python script for a basic LangChain agent that uses a search tool to answer questions.\r\n\r\n# {{agentName}} - LangChain Agent\r\n\r\nA Python-based AI agent built with LangChain that can search the web and answer questions intelligently.\r\n\r\n## Features\r\n\r\n- **LangChain Integration**: Built on the LangChain framework\r\n- **{{llmProvider}} LLM**: Powered by {{llmProvider}} language models\r\n- **Tool Integration**: Web search and custom tool support\r\n- **Memory Management**: Conversation history and context retention\r\n- **Streaming Responses**: Real-time response streaming\r\n- **Error Handling**: Robust error handling and logging\r\n\r\n## Prerequisites\r\n\r\n- Python 3.8+\r\n- {{llmProvider}} API key\r\n- Internet connection for web search\r\n\r\n## Installation\r\n\r\n```bash\r\n# Clone the repository\r\ngit clone https://github.com/username/{{agentName}}.git\r\ncd {{agentName}}\r\n\r\n# Create virtual environment\r\npython -m venv venv\r\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\r\n\r\n# Install dependencies\r\npip install -r requirements.txt\r\n```\r\n\r\n## Environment Setup\r\n\r\nCreate a `.env` file in the root directory:\r\n\r\n```env\r\n# {{llmProvider}} Configuration\r\nOPENAI_API_KEY=your_openai_api_key_here\r\nANTHROPIC_API_KEY=your_anthropic_api_key_here\r\n\r\n# Search Configuration\r\nSERPAPI_API_KEY=your_serpapi_key_here\r\n\r\n# Agent Configuration\r\nAGENT_NAME={{agentName}}\r\nMAX_ITERATIONS=10\r\nVERBOSE=true\r\n```\r\n\r\n## Usage\r\n\r\n### Basic Usage\r\n\r\n```python\r\nfrom langchain_agent import {{agentName}}Agent\r\n\r\n# Initialize the agent\r\nagent = {{agentName}}Agent()\r\n\r\n# Ask a question\r\nresponse = agent.run(\"What are the latest developments in AI?\")\r\nprint(response)\r\n```\r\n\r\n### Advanced Usage\r\n\r\n```python\r\nfrom langchain_agent import {{agentName}}Agent\r\nfrom langchain.memory import ConversationBufferMemory\r\n\r\n# Initialize with custom memory\r\nmemory = ConversationBufferMemory(\r\n    memory_key=\"chat_history\",\r\n    return_messages=True\r\n)\r\n\r\nagent = {{agentName}}Agent(\r\n    memory=memory,\r\n    verbose=True,\r\n    max_iterations=15\r\n)\r\n\r\n# Interactive conversation\r\nwhile True:\r\n    user_input = input(\"You: \")\r\n    if user_input.lower() in ['quit', 'exit']:\r\n        break\r\n    \r\n    response = agent.run(user_input)\r\n    print(f\"Agent: {response}\")\r\n```\r\n\r\n## Project Structure\r\n\r\n```\r\n{{agentName}}/\r\n├── src/\r\n│   ├── __init__.py\r\n│   ├── agent.py              # Main agent implementation\r\n│   ├── tools/                # Custom tools\r\n│   │   ├── __init__.py\r\n│   │   ├── search_tool.py\r\n│   │   └── custom_tools.py\r\n│   ├── prompts/              # Prompt templates\r\n│   │   ├── __init__.py\r\n│   │   └── agent_prompts.py\r\n│   └── utils/                # Utility functions\r\n│       ├── __init__.py\r\n│       └── helpers.py\r\n├── tests/                    # Unit tests\r\n├── examples/                 # Usage examples\r\n├── requirements.txt\r\n├── .env.example\r\n└── README.md\r\n```\r\n\r\n## Core Components\r\n\r\n### Agent Implementation\r\n\r\n```python\r\nfrom langchain.agents import initialize_agent, AgentType\r\nfrom langchain.tools import DuckDuckGoSearchRun\r\nfrom langchain.memory import ConversationBufferMemory\r\nfrom langchain.chat_models import ChatOpenAI\r\n\r\nclass {{agentName}}Agent:\r\n    def __init__(self):\r\n        self.llm = ChatOpenAI(temperature=0.7)\r\n        self.tools = [DuckDuckGoSearchRun()]\r\n        self.memory = ConversationBufferMemory(\r\n            memory_key=\"chat_history\",\r\n            return_messages=True\r\n        )\r\n        \r\n        self.agent = initialize_agent(\r\n            tools=self.tools,\r\n            llm=self.llm,\r\n            agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION,\r\n            memory=self.memory,\r\n            verbose=True\r\n        )\r\n    \r\n    def run(self, query: str) -> str:\r\n        return self.agent.run(query)\r\n```\r\n\r\n## Available Tools\r\n\r\n- **Web Search**: DuckDuckGo search integration\r\n- **Calculator**: Mathematical calculations\r\n- **Wikipedia**: Wikipedia article lookup\r\n- **Custom Tools**: Add your own tools easily\r\n\r\n## Customization\r\n\r\n### Adding Custom Tools\r\n\r\n```python\r\nfrom langchain.tools import Tool\r\n\r\ndef custom_calculator(query: str) -> str:\r\n    \"\"\"Custom calculator tool\"\"\"\r\n    try:\r\n        result = eval(query)\r\n        return f\"The result is: {result}\"\r\n    except:\r\n        return \"Invalid calculation\"\r\n\r\ncalculator_tool = Tool(\r\n    name=\"Calculator\",\r\n    func=custom_calculator,\r\n    description=\"Useful for mathematical calculations\"\r\n)\r\n```\r\n\r\n### Custom Prompts\r\n\r\n```python\r\nAGENT_PROMPT = \"\"\"\r\nYou are {{agentName}}, a helpful AI assistant.\r\nYou have access to the following tools:\r\n{tools}\r\n\r\nUse the following format:\r\nQuestion: the input question\r\nThought: think about what to do\r\nAction: the action to take\r\nAction Input: the input to the action\r\nObservation: the result of the action\r\nThought: I now know the final answer\r\nFinal Answer: the final answer\r\n\"\"\"\r\n```\r\n\r\n## Testing\r\n\r\n```bash\r\n# Run unit tests\r\npython -m pytest tests/\r\n\r\n# Run with coverage\r\npython -m pytest tests/ --cov=src/\r\n\r\n# Run specific test\r\npython -m pytest tests/test_agent.py::test_basic_query\r\n```\r\n\r\n## Deployment\r\n\r\n### Docker Deployment\r\n\r\n```dockerfile\r\nFROM python:3.9-slim\r\n\r\nWORKDIR /app\r\nCOPY requirements.txt .\r\nRUN pip install -r requirements.txt\r\n\r\nCOPY src/ ./src/\r\nCOPY .env .\r\n\r\nCMD [\"python\", \"-m\", \"src.agent\"]\r\n```\r\n\r\n### API Deployment\r\n\r\n```python\r\nfrom fastapi import FastAPI\r\nfrom pydantic import BaseModel\r\n\r\napp = FastAPI()\r\nagent = {{agentName}}Agent()\r\n\r\nclass Query(BaseModel):\r\n    question: str\r\n\r\n@app.post(\"/ask\")\r\nasync def ask_question(query: Query):\r\n    response = agent.run(query.question)\r\n    return {\"answer\": response}\r\n```\r\n\r\n## Contributing\r\n\r\n1. Fork the repository\r\n2. Create a feature branch\r\n3. Add tests for new functionality\r\n4. Submit a pull request\r\n\r\n## License\r\n\r\nMIT License - see LICENSE file for details.\r\n"
  },
  {
    "id": "life-prediction",
    "title": "Life Prediction",
    "tags": "Fun",
    "aliases": "",
    "content": "SYSTEM: Based on everything you know about me, reason + predict what the next 50 years of my life will look like.\n"
  },
  {
    "id": "mern-stack-project",
    "title": "MERN Stack Project README",
    "tags": "mern mongodb react fullstack",
    "aliases": "",
    "content": "\nGenerate a README for a full-stack MERN project, detailing how to run both the backend API and the frontend client.\nTest changes\n# {{projectName}}\n\n{{description}}\n\nA full-stack web application built with the MERN stack (MongoDB, Express.js, React, Node.js).\n\n## Tech Stack\n\n**Frontend:**\n- React 18\n- React Router DOM\n- Axios for API calls\n- Material-UI / Tailwind CSS\n- Context API / Redux for state management\n\n**Backend:**\n- Node.js\n- Express.js\n- MongoDB with Mongoose\n- JWT for authentication\n- bcryptjs for password hashing\n\n## Project Structure\n\n```\n{{projectName}}/\n├── client/                 # React frontend\n│   ├── public/\n│   ├── src/\n│   │   ├── components/\n│   │   ├── pages/\n│   │   ├── context/\n│   │   ├── utils/\n│   │   └── App.js\n│   └── package.json\n├── server/                 # Node.js backend\n│   ├── controllers/\n│   ├── models/\n│   ├── routes/\n│   ├── middleware/\n│   ├── config/\n│   └── server.js\n└── README.md\n```\n\n## Prerequisites\n\n- Node.js (v16 or higher)\n- MongoDB (local installation or MongoDB Atlas)\n- npm or yarn\n\n## Installation & Setup\n\n### 1. Clone the repository\n```bash\ngit clone https://github.com/username/{{projectName}}.git\ncd {{projectName}}\n```\n\n### 2. Backend Setup\n```bash\n# Navigate to server directory\ncd server\n\n# Install dependencies\nnpm install\n\n# Create environment file\ncp .env.example .env\n```\n\n### 3. Configure Environment Variables\nCreate a `.env` file in the server directory:\n\n```env\nNODE_ENV=development\nPORT=5000\nMONGO_URI=mongodb://localhost:27017/{{projectName}}\nJWT_SECRET=your_jwt_secret_here\nJWT_EXPIRE=30d\n```\n\n### 4. Frontend Setup\n```bash\n# Navigate to client directory\ncd ../client\n\n# Install dependencies\nnpm install\n\n# Create environment file\necho \"REACT_APP_API_URL=http://localhost:5000/api\" > .env\n```\n\n## Running the Application\n\n### Development Mode\n\n**Option 1: Run separately**\n```bash\n# Terminal 1 - Backend\ncd server\nnpm run dev\n\n# Terminal 2 - Frontend\ncd client\nnpm start\n```\n\n**Option 2: Run concurrently (from root)**\n```bash\nnpm run dev\n```\n\n### Production Mode\n\n```bash\n# Build frontend\ncd client\nnpm run build\n\n# Start production server\ncd ../server\nnpm start\n```\n\n## API Endpoints\n\n### Authentication\n- `POST /api/auth/register` - Register new user\n- `POST /api/auth/login` - User login\n- `GET /api/auth/me` - Get current user\n\n### Users\n- `GET /api/users` - Get all users (admin)\n- `GET /api/users/:id` - Get user by ID\n- `PUT /api/users/:id` - Update user\n- `DELETE /api/users/:id` - Delete user\n\n## Features\n\n- User authentication (register, login, logout)\n- Protected routes and middleware\n- CRUD operations\n- Responsive design\n- Error handling and validation\n- File upload functionality\n- Search and pagination\n\n## Testing\n\n```bash\n# Backend tests\ncd server\nnpm test\n\n# Frontend tests\ncd client\nnpm test\n```\n\n## Deployment\n\n### Heroku Deployment\n1. Create Heroku app\n2. Set environment variables\n3. Deploy using Git or GitHub integration\n\n### Docker Deployment\n```bash\n# Build and run with Docker Compose\ndocker-compose up --build\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create feature branch\n3. Commit changes\n4. Push to branch\n5. Create Pull Request\n\n## License\n\nThis project is licensed under the MIT License.\n"
  },
  {
    "id": "nodejs-express-api-readme",
    "title": "Node.js + Express API README",
    "tags": "nodejs express api readme backend",
    "aliases": "",
    "content": "\r\nCreate a detailed README.md for a Node.js and Express REST API, outlining endpoints, environment setup, and running procedures.\r\n\r\n# {{apiName}}\r\n\r\nA RESTful API built with Node.js and Express.js.\r\n\r\n## Prerequisites\r\n\r\n- Node.js (v14 or higher)\r\n- npm or yarn\r\n- MongoDB/PostgreSQL (depending on your database)\r\n\r\n## Installation\r\n\r\n```bash\r\n# Clone the repository\r\ngit clone https://github.com/username/{{apiName}}.git\r\n\r\n# Navigate to project directory\r\ncd {{apiName}}\r\n\r\n# Install dependencies\r\nnpm install\r\n\r\n# Create environment file\r\ncp .env.example .env\r\n```\r\n\r\n## Environment Variables\r\n\r\n```env\r\nPORT={{port}}\r\nNODE_ENV=development\r\nDATABASE_URL=your_database_url\r\nJWT_SECRET=your_jwt_secret\r\n```\r\n\r\n## Running the Application\r\n\r\n```bash\r\n# Development mode\r\nnpm run dev\r\n\r\n# Production mode\r\nnpm start\r\n```\r\n\r\n## API Endpoints\r\n\r\n### Authentication\r\n- `POST /api/auth/login` - User login\r\n- `POST /api/auth/register` - User registration\r\n- `GET /api/auth/profile` - Get user profile\r\n\r\n### Users\r\n- `GET /api/users` - Get all users\r\n- `GET /api/users/:id` - Get user by ID\r\n- `PUT /api/users/:id` - Update user\r\n- `DELETE /api/users/:id` - Delete user\r\n\r\n## Testing\r\n\r\n```bash\r\nnpm test\r\n```\r\n\r\n## Deployment\r\n\r\nInstructions for deploying to your preferred platform.\r\n"
  },
  {
    "id": "person-of-interest-report-generator",
    "title": "Person of Interest Report Generator",
    "tags": "",
    "aliases": "",
    "content": "Do intensive research on {{name}}, and give me a massive report on everything you find.\n"
  },
  {
    "id": "personal-realization-generator",
    "title": "Personal Realization Generator",
    "tags": "",
    "aliases": "",
    "content": "SYSTEM: Tell me something incredibly special or unique you've noticed about me, but you think I haven't realized about myself yet.\n"
  },
  {
    "id": "professional-readme-generator",
    "title": "Professional README.md Generator",
    "tags": "readme markdown docs utility",
    "aliases": "",
    "content": "\r\nGenerate a comprehensive and professional README.md for any project, including sections for features, installation, usage, and contributing.\r\n\r\n# {{projectName}}\r\n\r\n{{description}}\r\n\r\n## Features\r\n\r\n- Feature 1\r\n- Feature 2\r\n- Feature 3\r\n\r\n## Technology Stack\r\n\r\n{{techStack}}\r\n\r\n## Installation\r\n\r\n```bash\r\n# Clone the repository\r\ngit clone https://github.com/username/{{projectName}}.git\r\n\r\n# Navigate to project directory\r\ncd {{projectName}}\r\n\r\n# Install dependencies\r\nnpm install\r\n```\r\n\r\n## Usage\r\n\r\nProvide clear usage instructions here.\r\n\r\n## Contributing\r\n\r\n1. Fork the repository\r\n2. Create your feature branch (`git checkout -b feature/AmazingFeature`)\r\n3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)\r\n4. Push to the branch (`git push origin feature/AmazingFeature`)\r\n5. Open a Pull Request\r\n\r\n## License\r\n\r\nThis project is licensed under the MIT License.\r\n"
  },
  {
    "id": "python-fastapi-backend",
    "title": "Python + FastAPI Backend README",
    "tags": "python fastapi backend readme",
    "aliases": "",
    "content": "\r\nCreate a README for a Python backend using FastAPI, detailing virtual environment setup, dependencies, and running with Uvicorn.\r\n\r\n# {{apiName}}\r\n\r\nA high-performance API built with FastAPI and Python {{pythonVersion}}.\r\n\r\n## Features\r\n\r\n- **Fast**: Very high performance, on par with NodeJS and Go\r\n- **Fast to code**: Increase the speed to develop features by about 200% to 300%\r\n- **Fewer bugs**: Reduce about 40% of human (developer) induced errors\r\n- **Intuitive**: Great editor support with auto-completion\r\n- **Standards-based**: Based on OpenAPI and JSON Schema\r\n\r\n## Requirements\r\n\r\n- Python {{pythonVersion}}+\r\n- pip or poetry\r\n\r\n## Installation\r\n\r\n### Using pip\r\n\r\n```bash\r\n# Clone the repository\r\ngit clone https://github.com/username/{{apiName}}.git\r\ncd {{apiName}}\r\n\r\n# Create virtual environment\r\npython -m venv venv\r\n\r\n# Activate virtual environment\r\n# On Windows\r\nvenv\\Scripts\\activate\r\n# On macOS/Linux\r\nsource venv/bin/activate\r\n\r\n# Install dependencies\r\npip install -r requirements.txt\r\n```\r\n\r\n### Using Poetry\r\n\r\n```bash\r\n# Clone the repository\r\ngit clone https://github.com/username/{{apiName}}.git\r\ncd {{apiName}}\r\n\r\n# Install dependencies\r\npoetry install\r\n\r\n# Activate virtual environment\r\npoetry shell\r\n```\r\n\r\n## Environment Variables\r\n\r\nCreate a `.env` file in the root directory:\r\n\r\n```env\r\nDATABASE_URL=sqlite:///./sql_app.db\r\nSECRET_KEY=your-secret-key-here\r\nALGORITHM=HS256\r\nACCESS_TOKEN_EXPIRE_MINUTES=30\r\n```\r\n\r\n## Running the Application\r\n\r\n```bash\r\n# Development mode with auto-reload\r\nuvicorn main:app --reload\r\n\r\n# Production mode\r\nuvicorn main:app --host 0.0.0.0 --port 8000\r\n```\r\n\r\nThe API will be available at `http://localhost:8000`\r\n\r\n## API Documentation\r\n\r\n- **Interactive API docs**: `http://localhost:8000/docs`\r\n- **Alternative API docs**: `http://localhost:8000/redoc`\r\n\r\n## Project Structure\r\n\r\n```\r\n{{apiName}}/\r\n├── app/\r\n│   ├── __init__.py\r\n│   ├── main.py\r\n│   ├── dependencies.py\r\n│   ├── routers/\r\n│   │   ├── __init__.py\r\n│   │   ├── items.py\r\n│   │   └── users.py\r\n│   └── internal/\r\n│       ├── __init__.py\r\n│       └── admin.py\r\n├── tests/\r\n├── requirements.txt\r\n└── .env\r\n```\r\n\r\n## Testing\r\n\r\n```bash\r\npytest\r\n```\r\n\r\n## Deployment\r\n\r\nThe application can be deployed using Docker, Heroku, or any cloud platform that supports Python applications.\r\n"
  },
  {
    "id": "react-vite-project-readme",
    "title": "React + Vite Project README",
    "tags": "react vite frontend readme",
    "aliases": "",
    "content": "\r\nGenerate a README for a modern React 18 project bootstrapped with Vite, including TypeScript and ESLint configurations.\r\n\r\n# {{projectName}}\r\n\r\n{{description}}\r\n\r\nThis project was bootstrapped with Vite and includes modern development tools and configurations.\r\n\r\n## Tech Stack\r\n\r\n- **React 18** - A JavaScript library for building user interfaces\r\n- **Vite** - Next generation frontend tooling\r\n- **TypeScript** - JavaScript with syntax for types\r\n- **ESLint** - Find and fix problems in JavaScript code\r\n- **Tailwind CSS** - A utility-first CSS framework\r\n\r\n## Getting Started\r\n\r\n### Prerequisites\r\n\r\n- Node.js (v16 or higher)\r\n- npm or yarn\r\n\r\n### Installation\r\n\r\n```bash\r\n# Clone the repository\r\ngit clone https://github.com/username/{{projectName}}.git\r\n\r\n# Navigate to project directory\r\ncd {{projectName}}\r\n\r\n# Install dependencies\r\nnpm install\r\n\r\n# Start development server\r\nnpm run dev\r\n```\r\n\r\nThe application will open in your browser at `http://localhost:5173`.\r\n\r\n## Available Scripts\r\n\r\n- `npm run dev` - Start development server\r\n- `npm run build` - Build for production\r\n- `npm run preview` - Preview production build\r\n- `npm run lint` - Run ESLint\r\n- `npm run lint:fix` - Fix ESLint errors\r\n\r\n## Project Structure\r\n\r\n```\r\nsrc/\r\n├── components/     # Reusable UI components\r\n├── pages/         # Page components\r\n├── hooks/         # Custom React hooks\r\n├── utils/         # Utility functions\r\n├── types/         # TypeScript type definitions\r\n├── styles/        # Global styles\r\n└── App.tsx        # Main App component\r\n```\r\n\r\n## Deployment\r\n\r\n```bash\r\n# Build for production\r\nnpm run build\r\n\r\n# The dist folder contains the production build\r\n```\r\n\r\nDeploy the `dist` folder to your preferred hosting platform.\r\n"
  },
  {
    "id": "sample-prompt",
    "title": "Sample Prompt",
    "tags": "example test",
    "aliases": "example-prompt test-prompt",
    "content": "\r\n# {{name}}'s Custom Plan\r\n\r\nHello {{name}}! I'll help you achieve your goal:\r\n\r\n> {{goal}}\r\n\r\nBased on your {{experience}} experience level, here's a customized plan:\r\n\r\n1. First step\r\n2. Second step\r\n3. Final step\r\n\r\nLet me know if you need any clarification or have questions about this plan.\r\n\r\n"
  },
  {
    "id": "smooth-animations-and-micro-interactions",
    "title": "Smooth animations and micro interactions",
    "tags": "UI Test",
    "aliases": "",
    "content": "Add smooth animations and micro interactions like：\n- smooth hover effects\n- gentle tilt effects\n- scroll-based animations\n- animated glitch-style\n- inertia-based scroll\n"
  },
  {
    "id": "test",
    "title": "Test",
    "tags": "",
    "aliases": "",
    "content": "Test\n"
  },
  {
    "id": "testtesttest",
    "title": "testtesttest",
    "tags": "testtesttesttest",
    "aliases": "",
    "content": "testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest\ntesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttestt\nesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest\nttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest\n\nttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest\n\nttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest\n\nttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest\n\n\nttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest\n\n\nttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest\n\n"
  },
  {
    "id": "vibe-coding-documentation",
    "title": "Vibe-coding Documentation",
    "tags": "Programming",
    "aliases": "",
    "content": "You are a senior prompt engineer and technical documentation expert. Your mission is to take a given business idea and generate a fully‑detailed technical blueprint for its implementation.  \nThe blueprint must cover **nine** sections:\n\n1. **Product Design Requirements (PDR):**\n   - Describe the overall project vision.\n   - Define target users and core features.\n   - List functional and non‑functional requirements.\n   - Explain how the product solves a specific problem or meets a need.\n\n2. **Tech Stack:**\n   - Specify the frontend, backend, and any supporting technologies.\n   - Include details on frameworks, libraries, and tools (e.g., React, Next.js, Node.js, etc.).\n   - Explain why each technology is chosen and how it fits into the overall architecture.\n\n3. **App Flowchart:**\n   - Provide a high‑level flowchart illustrating the user journey and system architecture.\n   - Include key components, data flows, and interactions (e.g., user input → API processing → data storage).\n   - Make sure the flowchart is clear and logically organized.\n\n4. **Project Rules:**\n   - Outline development best practices and coding standards.\n   - Define version‑control and branching strategies.\n   - Detail rules for testing, documentation, and code reviews.\n   - Include guidelines for performance optimisation and accessibility.\n\n5. **Implementation Plan:**\n   - Break the project into phases or milestones.\n   - Provide step‑by‑step tasks for initial setup, feature integration, testing, and deployment.\n   - Assign estimated timelines and note key dependencies.\n   - Ensure the plan is actionable and logical.\n\n6. **Frontend Guidelines:**\n   - Specify design principles (e.g., responsive design, accessibility, and UI/UX best practices).\n   - List component‑architecture patterns (e.g., modular design, state management, hooks usage).\n   - Include styling standards (e.g., Tailwind CSS, CSS‑in‑JS) and performance practices (e.g., lazy loading, code splitting).\n\n7. **Backend Guidelines:**\n   - Describe the server architecture and API design.\n   - Detail data‑storage solutions, databases, and caching strategies.\n   - Include security, scalability, and performance measures.\n   - Explain how backend services integrate with the frontend.\n\n8. **Optimised React Code Guidelines:**\n   - Provide best practices for writing performant React code.\n   - Cover common pitfalls such as inline objects/functions causing unnecessary rerenders.\n   - Suggest using techniques such as `React.memo`, `useCallback`, and `useMemo`.\n   - Include example code snippets showing both problematic patterns and their optimised solutions.\n   - Explain how to structure React components for maintainability and scalability.\n\n9. **Security Checklist (MUST be enforced across the stack):**\n   1. **Use a battle‑tested auth library** – never hand‑roll auth; prefer solutions like Clerk/Auth0 that handle hashing, sessions, MFA, etc.  \n   2. **Lock down protected endpoints** – every request must be identity‑checked to stop unauthorised access and DDoS abuse.  \n   3. **Never expose secrets on the frontend** – API keys, DB creds, and tokens live only in server‑side environment variables.  \n   4. **Git‑ignore sensitive files** – always add `.env` (and similar) to `.gitignore` to avoid accidental leaks.  \n   5. **Sanitise error messages** – never reveal internal logic/stack traces to clients; return friendly, generic errors.  \n   6. **Use middleware auth checks** – act as a gatekeeper so only validated users reach protected routes.  \n   7. **Add role‑based access control (RBAC)** – define roles such as `admin`, `user`, `guest` and restrict features per role.  \n   8. **Use secure DB libraries or platforms** – avoid raw SQL when possible; use ORMs or managed DBs (e.g., Supabase) that ship with row‑level security.  \n   9. **Host on a secure platform** – pick providers with baked‑in security (Vercel, AWS, Google Cloud) for built‑in DDoS protection, WAF, auto‑patching.  \n   10. **Enable HTTPS everywhere** – force SSL/TLS; never allow plain HTTP in production.  \n   11. **Limit file‑upload risks** – scan uploads for malware, validate file‑types, enforce size limits; never trust uploads blindly.\n\n---\n\n**Instructions for the model:**\n\n* Use clear, direct language and break down complex concepts into bullet points or numbered steps.  \n* For each section, include a concise summary, detailed descriptions, examples (when helpful), and concrete, actionable guidelines.  \n* Format the entire response in Markdown with headings, sub‑headings, code blocks, and bullet lists for maximum readability.  \n* Think like an experienced technical architect: explain not only _what_ to do but _why_ it matters, providing context and step‑by‑step reasoning.  \n* Incorporate every item from the **Security Checklist** into the relevant parts of the blueprint (Tech Stack choices, Backend Guidelines, Implementation Plan, etc.)\n"
  }
]